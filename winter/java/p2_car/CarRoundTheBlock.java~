import java.util.Scanner ;
public class CarRoundTheBlock {
  
 
  
  public static boolean checkWinner(Car[] carData, Car car, int firstPos, int currentPos, int remainingGas, int carsOnRoad) {
  if (car.getGas() >= car.getDistance()) {
    if(currentPos == firstPos) {
      return true;
    } else {
      remainingGas += car.getGas() - car.getDistance();
      Car nextCar = nextCar(cars, currentPos, carsOnRoad);
      checkWinner(cars, nextCar, firstPos, nextCar.getPosition, remainingGas, carsOnRoad);
    }
  }
  
  return false;
}
  
   public static int findTheWinner (Car carData[ ], int carsOnRoad) {
    for(int i = 0; i < carsOnRoad; i++) {
      if (checkWinner(carData, carData[i], i, i, carData[i].getGas(), carsOnRoad)) {
        return i;
      }
    }
    return carsOnRoad + 1;
  }
  
  
  /*public static int findTheWinner (Car carData[ ], int carsOnRoad) {
    int position = 0;
    int winner = 0;
    for(int j = 0;j<carsOnRoad;j++){
      int gas = carData[j].getGas() - carData[j].getDistance();
      if(checkWinner(carData, carData[position], position, j, gas, carsOnRoad) == true){
        winner = j;
        break;
      }
      else{
        position++;
      }
      }
      
      
      
      
      if(carData[position].getGas() >= carData[position].getDistance()){
        int gas = carData[position].getGas();
        int distance = carData[position].getDistance();
        int i=position+1;
        int score = 0;
           while(i!=position){
             if((gas + nextCar(carData, position, carsOnRoad).getGas() - distance + nextCar(carData, position, carsOnRoad).getGas())>=0){ 
              position = (position+1)%carsOnRoad;
              score++;
              if(score==carsOnRoad){
                winner = position;
                break;
             }
             else{
               break;}
           }
      }
    }
return winner;
  }
      /*if(winner>=carsOnRoad){
        log(carData, carsOnRoad, winner);
                             }
      else{
        System.out.println("Not enough gas for full circle");
           }*/
    
  
  
  public static int fillCarArray (Car cars [ ], int maxsize) {
   Scanner input = new Scanner(System.in);
    
   int position = 0 ;
   int gas = 0;
   int distance = 0;
   int temp = 75;
   while(position<99){
    temp = input.nextInt();
    if(temp<0){
      break;}
    gas = temp;
    temp = input.nextInt();
    if(temp<0){
      break;}
    distance = temp;
    if(position < 0) {
      System.out.println("stfu") ;
    }
    Car newCar = new Car (position , gas , distance) ;
         cars[position] = newCar ;
    System.out.println(newCar);
    position++;
   }
   int carsroad = (position);
  return carsroad;
  }
  
  public static void printCarArray (Car carData [ ], int carsOnRoad) {
    System.out.println("Number of cars on the road: " + carsOnRoad);
    for(int j=0; j < carsOnRoad; j++){
      System.out.println("car " + carData[j].getPosition() + " has gas enough for " + carData[j].getGas() + " miles, distance to neighbor " + carData[j].getDistance() + " miles"); 
  }
  }
  public static void log (Car carData[ ], int carsOnRoad, int position) {
    int i = position + 1;
    int gas = carData[position].getGas();
    int distance = carData[position].getDistance();
    int totaldistance = 0;
    System.out.println("Begin at position "+carData[position].getPosition()+ " gas " + carData[position].getGas()+" distance "+carData[position].getDistance());
    while(i!=position){
      gas = gas - distance;
      //distance = distance - distance
      totaldistance = totaldistance + carData[position].getDistance();
      System.out.println("Got to position " + i +", "+ gas + " miles gas  left, " + totaldistance + " miles distance travelled");
      gas = gas + carData[i].getGas();
      //distance = distance + carData[i].getDistance()
      System.out.println("Getting " + carData[i].getGas() + " miles worth of gas, now have " + gas + " miles worth, starting next leg");
        i = (i +1)%carsOnRoad;
    }    
    System.out.println("Finished driving, drove " + totaldistance + " miles, gas left" + gas +" miles worth");
    return;
  }
  
  public static Car nextCar ( Car carData[ ], int currentPosition, int carsOnRoad) {
    
    return carData[(currentPosition+1)%carsOnRoad];
  }
  
   public static void main(String[] args) {
   final int maxSize = 99;  
   Car[] carData = new Car[maxSize];
   
   int carsOnRoad = fillCarArray(carData, maxSize);
   printCarArray(carData, carsOnRoad);
   int winner = findTheWinner(carData, carsOnRoad);
   winner--;
   if(winner>0){
   System.out.println(winner+"winning");
  }
 }
}